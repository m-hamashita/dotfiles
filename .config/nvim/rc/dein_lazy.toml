[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'psf/black'

[[plugins]]
repo = 'heavenshell/vim-pydocstring'
build = 'make install'
on_ft = ['python']
hook_add = '''
    let g:pydocstring_formatter = 'google'
    nmap <leader>pd <Plug>(pydocstring)
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
    nmap <leader>ct :<C-u>ConflictMarkerThemselves<CR>
    nmap <leader>co :<C-u>ConflictMarkerOurselves<CR>
    nmap <leader>cb :<C-u>ConflictMarkerBoth<CR>
'''

[[plugins]]
repo = 'linty-org/key-menu.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_cmd = 'Telescope'
hook_add = '''
    nnoremap <leader>ff <cmd>Telescope find_files<cr>
    nnoremap <leader>gg <cmd>Telescope git_files<cr>
    nnoremap <leader>fg <cmd>Telescope live_grep<cr>
    nnoremap <leader>fb <cmd>Telescope buffers<cr>
    nnoremap <leader>fh <cmd>Telescope help_tags<cr>
'''
[[plugins]]
repo = 'fannheyward/telescope-coc.nvim'

[[plugins]]
repo = 'dstein64/vim-startuptime'
on_event = 'VimEnter'

# neovim terminal plugin
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
	let g:neoterm_autoinsert = 1
	let g:neoterm_autoscroll = 1
	" # let g:neoterm_split_on_tnew = 1
	let g:neoterm_default_mod = "belowright"

	function! NTermInNewTab()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "tab"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	function! NTermCurrentDir()
		let l:cmd = "cd " .expand("%:p:h")
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function! NTermPython( ... )
		if expand("%:e") != 'py'
			echo '[error] Invalid file extension.'
			return
		endif
		let l:cmd = "python " .expand("%:p")
		for arg in a:000
			let l:cmd = l:cmd . " " . arg
			"let l:cmd.cmd = [ l:cmd.cmd, arg ]
		endfor
		call neoterm#exec({ 'cmd': [ cmd ] })
		"T python l:cmd
		Topen
	endfunction


	function! GitPush( comment )
		let l:cmd = "cd " .expand("%:p:h")
		let l:cmd = l:cmd . " && source ~/.config/nvim/scripts/GitPush.sh " . a:comment
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function! UpdateConfig()
		let l:cmd = "cd ~/.config/nvim"
		let l:cmd = l:cmd . " && git pull"
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
		" execute "source ~/.config/nvim/init.vim"
	endfunction

	function! NTermMulti( v_num, h_num )
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "tab"
		Tnew
		" # vertical split
		let g:neoterm_default_mod = "vertical"
		for i in range( a:h_num - 1 )
			Tnew
		endfor
		" # holizontal split
		let g:neoterm_default_mod = "aboveleft"
		for i in range( a:h_num )
			for i in range( a:v_num - 1 )
				Tnew
			endfor
			" # move to left window
			execute "winc l"
		endfor
		" # move to top-left window
		execute "winc t"
		let g:neoterm_default_mod = l:tmp
	endfunction

	function! NTermHolizontalSplit()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "aboveleft"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	function! NTermVerticalSplit()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "vertical"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	nnoremap <silent> <c-t><c-t> :Ttoggle<CR>
	tnoremap <silent> <c-t><c-t> <C-\><C-n>:Ttoggle<CR>
	nnoremap <c-t><c-h> :call NTermHolizontalSplit()<CR>
	nnoremap <c-t><c-v> :call NTermVerticalSplit()<CR>

	command! CMake                call NTermCMake()
	command! CatkinMake           call NTermCatkinMake()
	command! -nargs=* Python      call NTermPython(<f-args>)
	"command! -nargs=* Python      :T python %:p <f-args>
	command! TexCompile           call NTermTexCompile()
	command! UpdateConfig         call UpdateConfig()
	command! -nargs=1 GitPush     call GitPush(<f-args>)
	command! -nargs=+ NTermMulti  call NTermMulti(<f-args>)
	command! NTermMulti4          call NTermMulti(2,2)
	command! NTermMulti6          call NTermMulti(3,2)
	command! NTermMulti8          call NTermMulti(4,2)
'''
on_event = 'VimEnter'

# memo
[[plugins]]
repo = "eiji03aero/quick-notes"
on_event = 'VimEnter'
hook_add = '''
" directory to place notes and diaries.
let g:quick_notes_directory = '~/.cache/quick-notes/'
" suffix used for diaries
let g:quick_notes_suffix = 'md'
'''

[[plugins]]
repo = "tyru/caw.vim"
hook_add = '''
    nmap , <Plug>(caw:hatpos:toggle)
    vmap , <Plug>(caw:hatpos:toggle)
'''
on_event = 'VimEnter'

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_event = 'VimEnter'
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'VimEnter'
[[plugins]]
repo = 'SmiteshP/nvim-navic'
on_event = 'VimEnter'
hook_source = '''
" TODO: coc から lspconfig(mason) に移行する
lua <<EOF
  local lsp_flags = {
    -- This is the default in Nvim 0.7+
    debounce_text_changes = 150,
  }
  -- nvim-navic
  local navic = require("nvim-navic")
  require("lspconfig").clangd.setup {
      on_attach = function(client, bufnr)
          navic.attach(client, bufnr)
      end
  }
  -- require("lspconfig").rust_analyzer.setup {
  --     on_attach = on_attach,
  --     flags = lsp_flags,
  -- }
EOF
'''

# displayed range search
[[plugins]]
repo = 'notomo/reacher.nvim'
on_event = 'VimEnter'
hook_source = '''
lua <<EOF
  -- search in the current window
  vim.keymap.set({ "n", "x" }, "gs", [[<Cmd>lua require("reacher").start()<CR>]])

  -- search in the all windows in the current tab
  vim.keymap.set({ "n", "x" }, "gS", [[<Cmd>lua require("reacher").start_multiple()<CR>]])

  -- search in the current line
  vim.keymap.set({ "n", "x" }, "gl", function()
    require("reacher").start({
      first_row = vim.fn.line("."),
      last_row = vim.fn.line("."),
    })
  end)

  local group = "reacher_setting"
  vim.api.nvim_create_augroup(group, {})
  vim.api.nvim_create_autocmd({ "FileType" }, {
    group = group,
    pattern = { "reacher" },
    callback = function()
      vim.keymap.set({ "n", "i" }, "<CR>", [[<Cmd>lua require("reacher").finish()<CR>]], { buffer = true })
      vim.keymap.set({ "n", "i" }, "<ESC>", [[<Cmd>lua require("reacher").cancel()<CR>]], { buffer = true })

      vim.keymap.set("n", "gg", [[<Cmd>lua require("reacher").first()<CR>]], { buffer = true })
      vim.keymap.set("n", "G", [[<Cmd>lua require("reacher").last()<CR>]], { buffer = true })

      vim.keymap.set({ "n", "i" }, "<C-n>", [[<Cmd>lua require("reacher").next()<CR>]], { buffer = true })
      vim.keymap.set({ "n", "i" }, "<C-p>", [[<Cmd>lua require("reacher").previous()<CR>]], { buffer = true })
      vim.keymap.set("i", "<Down>", [[<Cmd>lua require("reacher").next()<CR>]], { buffer = true })
      vim.keymap.set("i", "<Up>", [[<Cmd>lua require("reacher").previous()<CR>]], { buffer = true })
    end,
  })
EOF
'''

[[plugins]]
repo = "lukas-reineke/indent-blankline.nvim"
on_event = 'VimEnter'
hook_source = '''
lua <<EOF
  vim.opt.list = true
  require("indent_blankline").setup {
    show_current_context = true,
  }
EOF
'''

# rainbow parenthesis
[[plugins]]
repo = 'luochen1990/rainbow'
on_event = 'VimEnter'
hook_add = '''
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# https://discourse.nixos.org/t/cant-get-nvim-treesitter-neovim-plugin-to-work-properly/21368
rev = "501db1459a7a46cb0766b3c56e9a6904bbcbcc97"
on_event = 'VimEnter'
hook_source = '''
" nvim-treesitter
if !exists('g:vscode')
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
  ensure_installed = {"go", "python", "lua", "yaml", "json",  "bash", "latex", "fish", "gomod", "html", "toml", "vim", "ruby", "c", "cpp", "c_sharp", "comment", "jsonc", "javascript", "cuda", "scala", "dockerfile", "rust", "query", "julia", "lua"},
  indent = {
    enable = true,
  },
  textobjects = {
    select = {
      enable = true,

      -- Automatically jump forward to textobj, similar to targets.vim
      lookahead = true,

      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ["af"] = "@function.outer",
        ["if"] = "@function.inner",
        ["ac"] = "@class.outer",
        ["ic"] = "@class.inner",
      },
    },
  },
}
EOF
endif
'''
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_event = 'VimEnter'

[[plugins]]
repo = 'fedepujol/move.nvim'
on_event = 'VimEnter'
hook_add = '''
    nnoremap <silent> <A-Down> :MoveLine(1)<CR>
    nnoremap <silent> <A-Up> :MoveLine(-1)<CR>
    vnoremap <silent> <A-Down> :MoveBlock(1)<CR>
    vnoremap <silent> <A-Up> :MoveBlock(-1)<CR>

    nnoremap <silent> <A-Right> :MoveHChar(1)<CR>
    nnoremap <silent> <A-Left> :MoveHChar(-1)<CR>
    vnoremap <silent> <A-Right> :MoveHBlock(1)<CR>
    vnoremap <silent> <A-Left> :MoveHBlock(-1)<CR>
'''

[[plugins]]
repo = 'sindrets/diffview.nvim'
on_event = 'VimEnter'

# Get Pull Request for line
[[plugins]]
repo = 'skanehira/getpr.vim'
on_event = 'VimEnter'

# completion
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_event = 'VimEnter'
[[plugins]]
repo = 'hashivim/vim-terraform'
on_event = 'VimEnter'
[[plugins]]
repo = 'dag/vim-fish'
on_event = 'VimEnter'

[[plugins]]
repo = 'kana/vim-altercmd'
hook_add = '''
	call altercmd#load()
	AlterCommand tmux Tmux
	AlterCommand work Work
	AlterCommand cheat Cheat
	AlterCommand shell Shell
	AlterCommand prog Prog
	AlterCommand goal Goal
	AlterCommand todo Todo
	AlterCommand path Path
	AlterCommand refresh Refresh
    AlterCommand memo Memo
    AlterCommand memofzf MemoFzf
'''
on_event = 'VimEnter'

# resize window
[[plugins]]
repo = 'simeji/winresizer'
on_event = 'VimEnter'
hook_add = '''
    let g:winresizer_start_key = '<C-w>'
    let g:winresizer_vert_resize = 1
    let g:winresizer_horiz_resize = 1
'''

# fuzzy finder
[[plugins]]
repo = 'junegunn/fzf'
on_event = 'VimEnter'
build = './install --all'
[[plugins]]
repo = 'junegunn/fzf.vim'
on_event = 'VimEnter'

# language server manager
[[plugins]]
repo = 'neoclide/coc.nvim'
on_event = 'VimEnter'
build = './install.sh nightly'
hook_add = '''
    let coc#util#get_data_home = '~/.config/coc'
'''

# statusline/tabline
# buffer display
[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
on_event = 'VimEnter'
[[plugins]]
repo = 'itchyny/lightline.vim'
on_event = 'VimEnter'
hook_add = '''
    set laststatus=2
    set showtabline=2
    let g:lightline = {
          \ 'colorscheme': 'tokyonight',
          \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
          \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \             [ 'gitbranch', 'readonly', 'filename', 'modified' ],
          \           ],
          \   'right': [
          \     [ 'lineinfo' ],
          \     [ 'filetype', 'percent' ]
          \   ],
          \ },
          \ 'component_function': {
          \   'gitbranch': 'FugitiveHead',
          \ },
          \ 'component_type': {
          \   'buffers': 'tabsel',
          \ },
          \ }
    let g:lightline#bufferline#show_number  = 1
    let g:lightline#bufferline#shorten_path = 0
    let g:lightline#bufferline#unnamed      = '[No Name]'
    let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
    let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
'''

# syntax checking and semantic errors
[[plugins]]
repo = 'dense-analysis/ale'
on_event = 'VimEnter'

# Git
[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'VimEnter'
[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = 'VimEnter'
[[plugins]]
repo = 'tpope/vim-rhubarb'
on_event = 'VimEnter'
