[[plugins]]
repo = 'Shougo/dein.vim'

# rainbow parenthesis
[[plugins]]
repo = 'luochen1990/rainbow'

# statusline/tabline
[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=0
    set showtabline=2
    let g:lightline = {
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \             [ 'gitbranch', 'readonly', 'filename', 'modified' ],
          \             [ 'vista' ],
          \           ]
          \ },
          \ 'component_function': {
          \   'gitbranch': 'fugitive#head',
          \   'vista': 'NearestMethodOrFunction',
          \ },
          \ }
    function! NearestMethodOrFunction() abort
      return get(b:, 'vista_nearest_method_or_function', '')
    endfunction

    let g:lightline#bufferline#show_number  = 1
    let g:lightline#bufferline#shorten_path = 0
    let g:lightline#bufferline#unnamed      = '[No Name]'

    let g:lightline = { 'colorscheme': 'tokyonight' }
    let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
    let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
    let g:lightline.component_type   = {'buffers': 'tabsel'}
'''

# syntax checking and semantic errors
[[plugins]]
repo = 'dense-analysis/ale'

# save session (use with tmux)
[[plugins]]
repo = 'tpope/vim-obsession'

# language server manager
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# build = './install.sh nightly'
# hook_add = '''
#     let coc#util#get_data_home = '~/.config/coc'
# '''

# file explorer
[[plugins]]
repo = 'Shougo/defx.nvim'
[[plugins]]
repo = 'ryanoasis/vim-devicons'
[[plugins]]
repo = 'kristijanhusak/defx-icons'
[[plugins]]
repo = 'kristijanhusak/defx-git'

# ranger
[[plugins]]
repo = 'kevinhwang91/rnvimr'

# Git
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'tpope/vim-rhubarb'

# highlight yanked region
[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
    let g:highlightedyank_highlight_duration = 300
'''


# resize window
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
    let g:winresizer_start_key = '<C-w>'
    let g:winresizer_vert_resize = 1
    let g:winresizer_horiz_resize = 1
'''

# fuzzy finder
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
nnoremap <silent><C-p> :<C-u>Deol -split=floating<CR>
'''

[[plugins]]
repo = 'kana/vim-altercmd'
hook_add = '''
	call altercmd#load()
	AlterCommand tmux Tmux
	AlterCommand work Work
	AlterCommand cheat Cheat
	AlterCommand shell Shell
	AlterCommand prog Prog
	AlterCommand goal Goal
	AlterCommand todo Todo
	AlterCommand path Path
	AlterCommand refresh Refresh
    AlterCommand memo Memo
    AlterCommand memofzf MemoFzf
'''

# neovim terminal plugin
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
	let g:neoterm_autoinsert = 1
	let g:neoterm_autoscroll = 1
	" # let g:neoterm_split_on_tnew = 1
	let g:neoterm_default_mod = "belowright"

	function! NTermInNewTab()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "tab"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	function! NTermCurrentDir()
		let l:cmd = "cd " .expand("%:p:h")
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function! NTermPython( ... )
		if expand("%:e") != 'py'
			echo '[error] Invalid file extension.'
			return
		endif
		let l:cmd = "python " .expand("%:p")
		for arg in a:000
			let l:cmd = l:cmd . " " . arg
			"let l:cmd.cmd = [ l:cmd.cmd, arg ]
		endfor
		call neoterm#exec({ 'cmd': [ cmd ] })
		"T python l:cmd
		Topen
	endfunction


	function! GitPush( comment )
		let l:cmd = "cd " .expand("%:p:h")
		let l:cmd = l:cmd . " && source ~/.config/nvim/scripts/GitPush.sh " . a:comment
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function! UpdateConfig()
		let l:cmd = "cd ~/.config/nvim"
		let l:cmd = l:cmd . " && git pull"
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
		" execute "source ~/.config/nvim/init.vim"
	endfunction

	function! NTermMulti( v_num, h_num )
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "tab"
		Tnew
		" # vertical split
		let g:neoterm_default_mod = "vertical"
		for i in range( a:h_num - 1 )
			Tnew
		endfor
		" # holizontal split
		let g:neoterm_default_mod = "aboveleft"
		for i in range( a:h_num )
			for i in range( a:v_num - 1 )
				Tnew
			endfor
			" # move to left window
			execute "winc l"
		endfor
		" # move to top-left window
		execute "winc t"
		let g:neoterm_default_mod = l:tmp
	endfunction

	function! NTermHolizontalSplit()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "aboveleft"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	function! NTermVerticalSplit()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "vertical"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	nnoremap <silent> <c-t><c-t> :Ttoggle<CR>
	tnoremap <silent> <c-t><c-t> <C-\><C-n>:Ttoggle<CR>
	nnoremap <c-t><c-h> :call NTermHolizontalSplit()<CR>
	nnoremap <c-t><c-v> :call NTermVerticalSplit()<CR>

	command! CMake                call NTermCMake()
	command! CatkinMake           call NTermCatkinMake()
	command! -nargs=* Python      call NTermPython(<f-args>)
	"command! -nargs=* Python      :T python %:p <f-args>
	command! TexCompile           call NTermTexCompile()
	command! UpdateConfig         call UpdateConfig()
	command! -nargs=1 GitPush     call GitPush(<f-args>)
	command! -nargs=+ NTermMulti  call NTermMulti(<f-args>)
	command! NTermMulti4          call NTermMulti(2,2)
	command! NTermMulti6          call NTermMulti(3,2)
	command! NTermMulti8          call NTermMulti(4,2)
'''

# Get Pull Request for line
[[plugins]]
repo = 'skanehira/getpr.vim'

# completion
[[plugins]]
repo = 'plasticboy/vim-markdown'
[[plugins]]
repo = 'hashivim/vim-terraform'
[[plugins]]
repo = 'dag/vim-fish'

[[plugins]]
repo = 'dbgx/lldb.nvim'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# https://discourse.nixos.org/t/cant-get-nvim-treesitter-neovim-plugin-to-work-properly/21368
rev = "501db1459a7a46cb0766b3c56e9a6904bbcbcc97"
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'

[[plugins]]
repo = 'skanehira/translate.vim'

[[plugins]]
repo = 'nvim-lua/popup.nvim'
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
[[plugins]]
repo = 'fannheyward/telescope-coc.nvim'

[[plugins]]
repo = "tyru/caw.vim"
hook_add = '''
    nmap , <Plug>(caw:hatpos:toggle)
    vmap , <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = "lukas-reineke/indent-blankline.nvim"

# ecosystem plugin using deno
[[plugins]]
repo = "vim-denops/denops.vim"

# support open new tab
[[plugins]]
repo = "lambdalisue/guise.vim"

[[plugins]]
repo = 'kat0h/dps-bufpreview.vim'

[[plugins]]
repo = 'camspiers/snap'

[[plugins]]
repo = 'ibhagwan/fzf-lua'
[[plugins]]
repo = 'vijaymarupudi/nvim-fzf'
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

# memo
[[plugins]]
repo = "eiji03aero/quick-notes"

[[plugins]]
repo = "4513ECHO/vim-readme-viewer"

# code screenshot
[[plugins]]
repo = 'skanehira/denops-germanium.vim'

[[plugins]]
repo = 'machakann/vim-sandwich'
[[plugins]]
repo = "tpope/vim-surround"

[[plugins]]
repo = 'gelguy/wilder.nvim'
[[plugins]]
repo = 'roxma/nvim-yarp'
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

# change directory using telescope
[[plugins]]
repo = 'zane-/cder.nvim'

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
[[plugins]]
repo = 'neovim/nvim-lspconfig'
[[plugins]]
repo = 'SmiteshP/nvim-navic'

# rust-tools
[[plugins]]
repo = 'simrat39/rust-tools.nvim'
[[plugins]]
repo = 'mfussenegger/nvim-dap'

# displayed range search
[[plugins]]
repo = 'notomo/reacher.nvim'

[[plugins]]
repo = 'levouh/tint.nvim'

[[plugins]]
repo = 'sindrets/diffview.nvim'

[[plugins]]
repo = 'fedepujol/move.nvim'

# Semantic language support
# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
[[plugins]]
repo = 'nvim-lua/lsp_extensions.nvim'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
[[plugins]]
repo = 'hrsh7th/cmp-path'
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
[[plugins]]
repo = 'rust-lang/rust.vim'
